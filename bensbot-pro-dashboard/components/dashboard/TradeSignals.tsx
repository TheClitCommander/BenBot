import { useState } from 'react';
import { CheckCircle, XCircle } from 'lucide-react';

// Sample data - this would be fetched from MongoDB in production
const tradeSignals = [
  { 
    id: 1,
    strategy: 'Momentum', 
    symbol: 'AAPL', 
    direction: 'BUY', 
    confidence: 85,
    time: '10:15 AM'
  },
  { 
    id: 2,
    strategy: 'Mean Reversion', 
    symbol: 'SPY', 
    direction: 'SELL', 
    confidence: 72,
    time: '10:30 AM'
  },
  { 
    id: 3,
    strategy: 'Volatility Breakout', 
    symbol: 'TSLA', 
    direction: 'BUY', 
    confidence: 68,
    time: '11:00 AM'
  },
];

export default function TradeSignals() {
  const [signals, setSignals] = useState(tradeSignals);
  
  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 80) return 'text-green-500 dark:text-[var(--success-color)]';
    if (confidence >= 60) return 'text-yellow-500 dark:text-[var(--warning-color)]';
    return 'text-red-500 dark:text-[var(--danger-color)]';
  };
  
  const handleApprove = (id: number) => {
    // In a real app, this would make an API call
    setSignals(signals.filter(signal => signal.id !== id));
    // Then possibly show a success notification
  };
  
  const handleSkip = (id: number) => {
    // In a real app, this would make an API call
    setSignals(signals.filter(signal => signal.id !== id));
    // Then possibly show a notification
  };
  
  return (
    <div className="dashboard-card">
      <h2 className="card-title">Trade Signals</h2>
      <p className="text-gray-500 dark:text-gray-400 mb-4">
        Upcoming trade signals generated by your strategies. Approve or skip each trade.
      </p>
      
      {signals.length === 0 ? (
        <div className="text-center py-10 text-gray-500 dark:text-gray-400">
          No signals at this time
        </div>
      ) : (
        <div className="space-y-4">
          {signals.map((signal) => (
            <div key={signal.id} className="border rounded-lg p-4 bg-gray-50 dark:bg-[var(--sidebar-bg)] border-gray-200 dark:border-[var(--border-color)]">
              <div className="flex justify-between items-center mb-2">
                <div className="flex items-center">
                  <div className={`w-2 h-2 rounded-full mr-2 ${signal.direction === 'BUY' ? 'bg-green-500' : 'bg-red-500'}`}></div>
                  <span className="font-medium text-gray-800 dark:text-gray-200">{signal.strategy}</span>
                </div>
                <span className="text-xs text-gray-500 dark:text-gray-400">{signal.time}</span>
              </div>
              
              <div className="flex justify-between items-center mb-2">
                <div>
                  <span className="text-lg font-bold text-gray-900 dark:text-white">{signal.symbol}</span>
                  <span className={`ml-2 font-medium ${signal.direction === 'BUY' ? 'text-green-600 dark:text-green-500' : 'text-red-600 dark:text-red-500'}`}>
                    {signal.direction}
                  </span>
                </div>
                <div className={`text-sm font-medium ${getConfidenceColor(signal.confidence)}`}>
                  Confidence: {signal.confidence}%
                </div>
              </div>
              
              <div className="flex space-x-2 mt-3">
                <button 
                  className="flex-1 bg-green-500 dark:bg-[var(--success-color)] text-white px-3 py-2 rounded text-sm font-medium hover:bg-green-600 flex items-center justify-center"
                  onClick={() => handleApprove(signal.id)}
                >
                  <CheckCircle className="w-4 h-4 mr-1" />
                  Approve
                </button>
                <button 
                  className="flex-1 bg-gray-300 dark:bg-gray-700 text-gray-700 dark:text-gray-300 px-3 py-2 rounded text-sm font-medium hover:bg-gray-400 dark:hover:bg-gray-600 flex items-center justify-center"
                  onClick={() => handleSkip(signal.id)}
                >
                  <XCircle className="w-4 h-4 mr-1" />
                  Skip
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
