version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - API_PORT=8000
      - API_HOST=0.0.0.0
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_API_SECRET=${ALPACA_API_SECRET}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL}
      - TRADIER_API_KEY=${TRADIER_API_KEY}
      - TRADIER_ACCOUNT_ID=${TRADIER_ACCOUNT_ID}
      - TRADIER_BASE_URL=${TRADIER_BASE_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    volumes:
      - ./:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./new-trading-dashboard
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000/ws
    restart: unless-stopped

  # Uncomment this section if you need a database
  # db:
  #   image: postgres:15-alpine
  #   environment:
  #     - POSTGRES_USER=username
  #     - POSTGRES_PASSWORD=password
  #     - POSTGRES_DB=trading_bot
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped

# Uncomment this section if you need a database
# volumes:
#   postgres_data:

volumes:
  app-data:
  logs:
  postgres_data:
    # Use a named volume for PostgreSQL data
    name: bensbot-postgres-data
  
networks:
  default:
    name: bensbot-network
