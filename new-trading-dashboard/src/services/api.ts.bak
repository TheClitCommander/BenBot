import axios from 'axios';

// Base API configuration for the trading bot backend
// Based on the actual endpoints in /Users/bendickinson/Desktop/Trading:BenBot/trading_bot/api/app.py
const API_BASE_URL = 'http://localhost:5000';

// Create axios instance with common configuration
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 5000 // 5 seconds timeout - reduced to fail faster when API is unavailable
});

// Connection status tracking
let isBackendAvailable = false;
let lastConnectionAttempt = 0;
const CONNECTION_RETRY_INTERVAL = 5000; // 5 seconds between reconnection attempts - more aggressive retry

// Enhanced error handling interceptor
apiClient.interceptors.response.use(
  (response) => {
    // Mark backend as available on successful response
    isBackendAvailable = true;
    return response;
  },
  (error) => {
    // Track connection failure
    isBackendAvailable = false;
    lastConnectionAttempt = Date.now();
    
    // Log the error details
    console.error('API Error:', error);
    console.log('Using fallback mock data mode');
    
    return Promise.reject(error);
  }
);

// Helper to check if we should attempt real API connection
const shouldTryRealApi = () => {
  // More aggressive retry approach - always try the real API
  const shouldTry = isBackendAvailable || 
         lastConnectionAttempt === 0 || 
         (Date.now() - lastConnectionAttempt) > CONNECTION_RETRY_INTERVAL;
  
  // Always log connection attempts
  if (shouldTry) {
    console.log('Attempting to connect to real AI backend at: ' + API_BASE_URL);
  }
  
  return shouldTry;
};

// AI Assistant API methods with intelligent fallback
export const aiApi = {
  sendMessage: async (message: string) => {
    // Only try real API connection if backend seems available or it's time to retry
    if (shouldTryRealApi()) {
      try {
        // Using the OpenAI/Claude integration you configured in config.py
        const response = await apiClient.post('/api/ai_chat', {
          message,
          context: 'trading'
        });
        return response.data;
      } catch (error) {
        console.error('Error sending message to AI Assistant:', error);
        // Fall through to mock data
      }
    } else {
      console.log('Using cached mock data (skipping API call)');
    }
    
    // Fallback mock responses with BenBot Assistant-like responses
    const query = message.toLowerCase();
    let mockResponse = "Hello! I'm BenBot, your trading assistant operating in simulation mode. How can I help you today? You can ask about running strategies, market analysis, trading opportunities, or portfolio status.";
    
    // Match intents similar to BenBotAssistant._match_intent method
    if (query.match(/run\s+(?:the\s+)?(?:trading\s+)?(?:strategy|strategies)/i)) {
      // Simulate _handle_run_strategy
      const strategyMatch = query.match(/strategy|strategies\s+for\s+(.+)/i);
      const strategyName = strategyMatch ? strategyMatch[1] : 'all active';
      mockResponse = `I've executed the ${strategyName} trading strategies. The system has analyzed current market conditions and identified potential entry points based on your configured parameters.`;
    } 
    else if (query.match(/(?:what\s+is\s+)?(?:the\s+)?(?:current\s+)?market\s+(?:regime|status|analysis)/i)) {
      // Simulate _handle_market_analysis
      mockResponse = "Current market regime: BULLISH (confidence: 78%). Trend strength is MODERATE. Key indicators show positive momentum with decreasing volatility. Most sectors are showing constructive price action with technology and healthcare leading.";
    } 
    else if (query.match(/(?:show|get|find)(?:\s+me)?\s+(?:the\s+)?(?:trading\s+)?opportunities/i)) {
      // Simulate _handle_trading_opportunities
      mockResponse = "Here are the current trading opportunities:\n1. NVDA (MomentumStrategy, confidence: 82%)\n2. AAPL (MeanReversionStrategy, confidence: 74%)\n3. MSFT (BreakoutStrategy, confidence: 67%)\n4. AMD (TrendFollowingStrategy, confidence: 65%)\n5. TSLA (VolatilityEdgeStrategy, confidence: 58%)";
    } 
    else if (query.match(/(?:what\s+is\s+)?(?:the\s+)?(?:current\s+)?portfolio\s+(?:status|value|holdings)/i)) {
      // Simulate _handle_portfolio_status with more detail
      mockResponse = "Portfolio status:\n- Total value: $852,437.29 (+1.49% today)\n- Monthly return: +7.2%\n- Asset allocation: Stocks (45%), Crypto (25%), Options (15%), Forex (10%), Cash (5%)\n- Top performers: NVDA (+3.2%), AAPL (+2.3%), MSFT (+1.8%)\n- Underperformers: JPM (-0.4%), BAC (-0.8%)";
    } 
    else if (query.match(/(?:help|assist|what\s+can\s+you\s+do|commands)/i)) {
      // Simulate _handle_help
      mockResponse = "Here's what you can ask me to do:\n1. Run trading strategies (e.g., 'Run the MomentumStrategy')\n2. Get market analysis (e.g., 'What's the current market regime?')\n3. Show trading opportunities (e.g., 'Show me the current opportunities')\n4. Check portfolio status (e.g., 'What's my portfolio value?')\n5. Get trading recommendations for specific assets\n6. Analyze risk exposure and allocation";
    } 
    else if (query.match(/(?:hello|hi|hey|good\s+(?:morning|afternoon|evening))/i)) {
      // Simulate _handle_greeting
      mockResponse = "Hello! I'm BenBot, your trading assistant. I'm currently running in simulation mode, but I can still provide insights about your portfolio, market analysis, and trading opportunities. How can I help you today?";
    } 
    else if (query.includes('crypto') || query.includes('bitcoin') || query.includes('ethereum')) {
      // Additional capability for crypto
      mockResponse = "Crypto Market Update:\n\n- Bitcoin: $78,245 (+1.6% today)\n- Ethereum: $4,321 (+3.2% today)\n- Market regime: Bullish with 72% confidence\n- Top opportunities: ETH (BreakoutStrategy, 76% confidence), SOL (MomentumStrategy, 68% confidence)\n\nETH is showing strength ahead of the protocol upgrade. Institutional inflows have increased 18% this month.";
    } 
    else if (query.includes('risk') || query.includes('exposure')) {
      // Additional capability for risk analysis
      mockResponse = "Risk Analysis:\n- Portfolio Beta: 1.2 (slightly above your 1.0 target)\n- VaR (95%): $24,720\n- Drawdown protection: Active with 3% trailing stops\n- Position sizing: Currently using Kelly criterion at 50% fraction\n\nRecommendation: Consider rebalancing your tech exposure which currently represents 42% of your total portfolio.";
    }
    else if (query.includes('backend') || query.includes('connect') || query.includes('mode')) {
      // Explain simulation mode
      mockResponse = "I'm currently running in simulation mode with pre-loaded market data. I'm designed to simulate the responses of your BenBot Assistant while the actual backend API is starting up or unavailable. I'll automatically connect to your trading system backend when it becomes available.";
    }
    else {
      // Simulate _handle_unknown_intent with better context
      mockResponse = "I'm not sure how to help with that specific query in simulation mode. Try asking about running strategies, getting market analysis, finding trading opportunities, or checking your portfolio status. These are the core capabilities I'm simulating from your BenBot Assistant.";
    }
    
    return {
      content: mockResponse,
      timestamp: new Date().toISOString()
    };
  }
};

// Portfolio API methods
export const portfolioApi = {
  getSummary: async () => {
    // Only try real API if available or time to retry
    if (shouldTryRealApi()) {
      try {
        // This endpoint is defined in the app.py file as /api/portfolio
        const response = await apiClient.get('/api/portfolio');
        return response.data;
      } catch (error) {
        console.error('Error fetching portfolio summary:', error);
        // Fall through to mock data
      }
    }
    
    // Return mock data as fallback
    return {
      totalValue: 852437.29,
      dailyChange: 12483.57,
      dailyChangePercent: 1.49,
      monthlyReturn: 7.2,
      allocation: [
        { category: 'Stocks', value: 45, color: '#4F8BFF' },
        { category: 'Options', value: 15, color: '#FF9800' },
        { category: 'Crypto', value: 25, color: '#4CAF50' },
        { category: 'Forex', value: 10, color: '#F44336' },
        { category: 'Cash', value: 5, color: '#9E9E9E' }
      ]
    };
  }
};

// Market data & News API methods
export const marketApi = {
  getNews: async (symbol = null, category = null, limit = 20) => {
    // Only try real API if available or time to retry
    if (shouldTryRealApi()) {
      try {
        // This endpoint is defined in app.py as /api/news
        const response = await apiClient.get('/api/news', { 
          params: { symbol, category, limit } 
        });
        return response.data;
      } catch (error) {
        console.error('Error fetching news:', error);
        // Fall through to mock data
      }
    }
    // Return mock news data
    return [
      {
        id: 'news1',
        title: 'Fed Signals Potential Rate Cut by Year End',
        source: 'Bloomberg',
        time: new Date(Date.now() - 3600000).toISOString(),
        summary: "Federal Reserve minutes revealed a more dovish stance than markets expected, with multiple board members suggesting rate cuts could begin as early as December if inflation continues to moderate.",
        sentiment: 'Positive',
        impact: 'High'
      },
      {
        id: 'news2',
        title: 'Tech Earnings Continue to Beat Expectations',
        source: 'CNBC',
        time: new Date(Date.now() - 7200000).toISOString(),
        summary: "Tech earnings have overwhelmingly beaten analyst expectations with 82% of reports coming in above consensus, led by strong AI-related growth and cloud computing demand.",
        sentiment: 'Positive',
        impact: 'Medium'
      },
      {
        id: 'news3',
        title: 'Oil Prices Decline on Inventory Build',
        source: 'Reuters',
        time: new Date(Date.now() - 10800000).toISOString(),
        summary: "Crude oil prices declined 2.4% following a larger than expected inventory build reported by the EIA, adding pressure to energy sector stocks already facing headwinds.",
        sentiment: 'Negative',
        impact: 'Medium'
      }
    ];
  },
  getSymbolData: async (symbol: string) => {
    try {
      // This would connect to endpoints that return symbol-specific data
      const response = await apiClient.get(`/api/market/symbols/${symbol}`);
      return response.data;
    } catch (error) {
      console.error(`Error fetching data for ${symbol}:`, error);
      return null;
    }
  }
};

// Trading strategies API methods
export const strategyApi = {
  getStrategies: async (status = null) => {
    try {
      // This endpoint is defined in app.py as /api/strategies
      const response = await apiClient.get('/api/strategies', {
        params: { status }
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching strategies:', error);
      return [];
    }
  }
};

// System logs API methods
export const logApi = {
  getLogs: async (limit = 50) => {
    try {
      // This endpoint is defined in app.py as /api/system_logs
      const response = await apiClient.get('/api/system_logs', {
        params: { limit }
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching system logs:', error);
      return [];
    }
  }
};

// Alerts and notifications
export const alertApi = {
  getAlerts: async (limit = 20) => {
    try {
      // This endpoint is defined in app.py as /api/alerts
      const response = await apiClient.get('/api/alerts', {
        params: { limit }
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching alerts:', error);
      return [];
    }
  }
};

// Trade history
export const tradeApi = {
  getTrades: async (account = 'live', limit = 20) => {
    try {
      // This endpoint is defined in app.py as /api/trades
      const response = await apiClient.get('/api/trades', {
        params: { account, limit }
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching trades:', error);
      return [];
    }
  }
};

// Export default API object with all services
export default {
  ai: aiApi,
  portfolio: portfolioApi,
  market: marketApi,
  strategy: strategyApi,
  log: logApi,
  alert: alertApi,
  trade: tradeApi
};
